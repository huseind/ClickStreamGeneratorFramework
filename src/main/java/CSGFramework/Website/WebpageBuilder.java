package CSGFramework.Website;

import java.util.*;

import static java.lang.Thread.sleep;

public class WebpageBuilder {
    // A site that the page belongs to
    //private final static Website defaultWebsite = new WebsiteBuilder().build();
    private Website website;
    private String url = "webpage.com";
    private int numberOfAutogeneratedActions = 1;
    HashMap<Action, Webpage> possibleActions = new HashMap<>();

    /**
     * Method that builds an object of a web page with the applied values
     * Checks if the list of possible actions for the page is empty and if the number of autogenerated actions is set
     * if so, it generates a number of non redirecting actions
     * @return an object of a Webpage
     */
    public Webpage build(){
        if(numberOfAutogeneratedActions >0){
            generateNonRedirectingActions(numberOfAutogeneratedActions);
        }
        return new Webpage(url,possibleActions);
    }


    /**
     * Method that
     * @param numberOfAutogeneratedActions
     * @return an instance of WebpageBuilder with number of autogenerated actions set
     */
    public WebpageBuilder setNumberOfAutogeneratedActions(int numberOfAutogeneratedActions) {
        this.numberOfAutogeneratedActions = numberOfAutogeneratedActions;
        return this;
    }


    /**
     * sets the url
     * @param url String URL of the Webpage
     * @return this instance of WebpageBuilder
     */
    public WebpageBuilder setUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * set the website the webpage belongs to
     * @param website, the website to be set
     * @return this instance of the builder
     */
    public WebpageBuilder setWebsite(Website website) {
        this.website = website;
        return this;
    }

    /**
     * adds a non redirecting action
     * @param action instance of an Action to be added
     * @return this instance of the builder
     */
    public WebpageBuilder addNonRedirectingeAction(Action action){
        possibleActions.put(action,null);
        return this;
    }

    /**
     * adds multiple nin redirecting actions
     * @param actionsToAdd List, actions to be added
     * @return this instance of the builder
     */
    public WebpageBuilder addNonRedirectingeActions(List<Action> actionsToAdd){
        for (Action action: actionsToAdd) {
            possibleActions.put(action,null);
        }
        return this;
    }


    /**
     * ads one redirecting action to the web page
     * @param action action that user wants to add
     * @param webpage @Nullable webpage that action redirects to
     * @return this instance of the builder
     */
    public WebpageBuilder addRedirectingAction(Action action, Webpage webpage){
        possibleActions.put(action, webpage);
        return this;
    }


    /**
     * Method that adds multiple redirecting actions to this web page
     * @param actionsToAdd
     * @return
     */
    public WebpageBuilder addRedirectingActions(HashMap<Action, Webpage> actionsToAdd){
        possibleActions.putAll(actionsToAdd);
        return this;
    }


    // UPDATED before final
    /**
     * Method that creates redirecting actions, it will try to redirect to pages on the website,
     * but if there are not enough pages or page(i) is this page, it will redirect to a random page.
     * @param numberOfRedirectingActions takes number of redirecting actions user wants to create
     * @param website the website actions belong to
     * @return returns an opbject of the builder
     */
    public WebpageBuilder generateRedirectingActions(int numberOfRedirectingActions, Website website){
        HashMap<Action, Webpage> returnMap = new HashMap<>();
        List<Webpage> webpages = website.getAllWebpages();
        for (int i =0; i < numberOfRedirectingActions; i++){
            if (i > webpages.size() - 1){
                returnMap.put(new ActionBuilder().build(),new WebpageBuilder().setUrl("randompage" + i +".com").build());
            }
            //TODO: This is redundant? since method is called in builder, this page will newer be a part of the website before we add it.
            else if(webpages.get(i).getUrl() == this.url){
                returnMap.put(new ActionBuilder().build(),new WebpageBuilder().setUrl("randompage" + i +".com").build());
            }
            else{
                returnMap.put(new ActionBuilder().build(),webpages.get(i));
            }
        }
        possibleActions.putAll(returnMap);
        return this;
    }



    /**
     * Method that generates non redirecting actions
     * @param a is the number of redirecting action generated for this webpage
     * @return returns an instance of the WebpageBuilder
     */

    public WebpageBuilder generateNonRedirectingActions(int a){
        HashMap<Action, Webpage> returnMap = new HashMap<>();
        for(int i = 0; i < a; i ++){
            Action action = new ActionBuilder().build();
            returnMap.put(action,null);
        }

        possibleActions.putAll(returnMap);
        return this;
    }



}

package CSGFramework.Website;

import org.jetbrains.annotations.Nullable;

import java.util.*;

import static java.lang.Thread.sleep;

public class PageBuilder {
    // A site that the page belongs to
    private final static Website defaultWebsite = new WebsiteBuilder().build();
    private Website website = defaultWebsite;
    private String url;
    private int numberOfAutogeneratedActions = 5;
    HashMap<Action,Page> possibleActions = new HashMap<>();

    public PageBuilder setNumberOfAutogeneratedActions(int numberOfAutogeneratedActions) {
        this.numberOfAutogeneratedActions = numberOfAutogeneratedActions;
        return this;
    }




    public PageBuilder setUrl(String url) {
        this.url = url;
        return this;
    }

    public PageBuilder setWebsite(Website website) {
        this.website = website;
        return this;
    }


    public PageBuilder addNonRedirectingeAction(Action action){
        possibleActions.put(action,null);
        return this;
    }

    public PageBuilder addNonRedirectingeActions(List<Action> actionsToAdd){
        for (Action action: actionsToAdd) {
            possibleActions.put(action,null);
        }
        return this;
    }

    /**
     *
     * @param action action that user wants to add
     * @param page @Nullable page that action redirects to
     * @return object if PageBuilder
     */
    public PageBuilder addRedirectingAction(Action action, Page page ){
        possibleActions.put(action,page);
        return this;
    }

    public PageBuilder addRedirectingActions(HashMap<Action,Page> actionsToAdd){
        possibleActions.putAll(actionsToAdd);
        return this;
    }

    public Page build(){
        if(possibleActions.isEmpty() && numberOfAutogeneratedActions >0){
            System.out.println(numberOfAutogeneratedActions);
            generateNonRedirectingActions(numberOfAutogeneratedActions);
        }
        return new Page(url,possibleActions);
    }

    /**
     * Method that creates redirecting actions
     *
     * @param numberOfRedirectingActions takes number of redirecting actions user wants to create
     * @param website the website actions belong to
     * @return returns an opbject of the builder
     */
    public PageBuilder generateRedirectingActions(int numberOfRedirectingActions, Website website){
        HashMap<Action,Page> returnMap = new HashMap<>();
        List<Page> pages = website.getAllPages();

        int numberOfActions = Math.max(pages.size(),numberOfRedirectingActions);
        System.out.println(numberOfActions + "!!!!!!!!!!");
        for (int i = 0; i < numberOfActions; i++){
            returnMap.put(new ActionBuilder().setActionId("RedAction" + i).build(),pages.get(i));
        }
        possibleActions.putAll(returnMap);
        return this;
    }

    public PageBuilder generateNonRedirectingActions(int a){
        HashMap<Action,Page> returnMap = new HashMap<>();
        for(int i = 0; i < a; i ++){
            Action action = new ActionBuilder().build();
            returnMap.put(action,null);
        }

        // How To iterate through a hashmap
        Iterator it = returnMap.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry)it.next();
            System.out.println(pair.getKey() + " = " + pair.getValue());
            it.remove(); // avoids a ConcurrentModificationException
        }

        possibleActions.putAll(returnMap);
        return this;
    }


    /////////////////////////////////////// PRIVATE: ONLY USED BY FRAMEWORK /////////////////////////////////////////////////


}

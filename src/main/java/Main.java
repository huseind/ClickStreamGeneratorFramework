import CSGFramework.Converters.UserActionConverter;
import CSGFramework.Exceptions.WrongFileTypeException;
import CSGFramework.Generator.ClickStreamGenerator;
import CSGFramework.Generator.ClickStreamGeneratorBuilder;
import CSGFramework.User.User;
import CSGFramework.User.UserAction;
import CSGFramework.User.UserBuilder;
import CSGFramework.Website.*;
import CSGFramework.Writers.CSVWriter;
import CSGFramework.Writers.IWriter;
import CSGFramework.Writers.JSONWriter;
import com.google.gson.JsonObject;
import com.google.gson.stream.JsonWriter;

import java.util.List;

public class Main {

    public static void main(String[] args) {

        /*
        // Generate clickstream data without any options specified
        ClickStreamGenerator generator = new ClickStreamGeneratorBuilder().build();
        List<UserAction> data = generator.generateCliksteram();


        //Creating a default website mock with builder
        Website myWebsite = new WebsiteBuilder().build();
        System.out.println(myWebsite.toString());



        //Creating a customized page with an non-redirecting action and adding it to a website mock with the builders
        Webpage homeWebpage = new WebpageBuilder().setUrl("anotherwebsite.com").addNonRedirectingeAction(new ActionBuilder().setActionId("Menu clicked").build()).build();

        Website anotherWebite = new WebsiteBuilder().setHomeWebpage(homeWebpage).setName("AnotherWebsite").addPage(homeWebpage).build();

        //Adding a non redirecting action to a page
        Webpage homeWebpage2 = new WebpageBuilder().setUrl("whoopwhoop.con").addRedirectingAction(new ActionBuilder().build(),new WebpageBuilder().build()).build();

        //Defining fields/ columns to be logged by the framework
        ClickStreamGenerator anotherGenerator = new ClickStreamGeneratorBuilder().includeIpAdress().excludeDate().build();


        // User implementing the they own implementation of the writeToFile() through the IWriter interface
        IWriter myWriter = new IWriter() {
            @Override
            public void writeToFile(String fileURL, List<UserAction> userActions) throws WrongFileTypeException {
                // write to my file
            }
        };

        try {
            myWriter.writeToFile("afile.xml",data);
        }
        catch (WrongFileTypeException e){
            e.getMessage();
        }


        /////////////////////////////////////////////// NEW /////////////////////////////////////////////

        // Adding a custom user to the ClickStreamGenerator
        ClickStreamGenerator anotherGen = new ClickStreamGeneratorBuilder().addUser(new UserBuilder().setId("Husein").build()).build();

        // Building a page with 1 autogenerated action.
        Webpage aWebpage = new WebpageBuilder().setNumberOfAutogeneratedActions(1).build();


        /////////////////////////////////////////// NEW AGAIN ///////////////////////////////////////////

        Website webSute = new WebsiteBuilder().build();
        Webpage webpaage = new WebpageBuilder().build();
        webSute.addWebpage(webpaage);


        User hus = new UserBuilder().setId("Husein").build();
        ClickStreamGenerator csg = new ClickStreamGeneratorBuilder().addUser(hus).build();
        csg.generateCliksteram();
        System.out.println(UserActionConverter.convertUserActionToJson(hus.getPerformedActions()));
        try {
            JSONWriter jsonWriter = new JSONWriter();
            jsonWriter.writeToFile("hei.json",hus.getPerformedActions());
        }catch (WrongFileTypeException e){
            e.printStackTrace();;
        }
    }
*/


        // Generating clickstream data && Autogenerating actions for a page
        ClickStreamGenerator generator = new ClickStreamGeneratorBuilder().setNumberOfActionsToGenerate(2).build();
        List<UserAction> generatedActions = generator.generateCliksteram();

        // converting to json object
        JsonObject jsonUserActions = UserActionConverter.convertUserActionToJson(generatedActions);

        // Write Data to file
        CSVWriter csvWriter = new CSVWriter();
        // write to file
        try {
            csvWriter.writeToFile("writerTestCsv.csv",generatedActions);
        }
        catch (WrongFileTypeException e){
            e.printStackTrace();
        }

        // exhausting all routes
        User user2 = new UserBuilder().setId("Husein").build();
        Website website2 = new WebsiteBuilder().build();
        ClickStreamGenerator clickStreamGenerator2 = new ClickStreamGeneratorBuilder().setWebsite(website2).addUser(user2).build();
        List<UserAction> userActions2 =clickStreamGenerator2.exhaust();


        //create a website mock && Defining actions for a page
        Website website = new WebsiteBuilder().setHomeWebpage(
                new WebpageBuilder().setUrl("Mysite.com/home")
                        .addNonRedirectingeAction(new ActionBuilder()
                                .setActionId("LikeAction")
                                .setTimeActionTakesToPerformInMs(200)
                                .setChanceOfActonBeingPerformed(0.2).build()).build())
                .setName("MyWebsite.com").build();




        // Options
        ClickStreamGenerator runningOutOfGeneratorNames = new ClickStreamGeneratorBuilder().excludeDate().excludeIpAdress().build();


        // finding fastest route
        ClickStreamGenerator cgs = new ClickStreamGeneratorBuilder().setWebsite(website).build();
        List<UserAction> actions= cgs.generateFastestRoute(website.getAllWebpages().get(0),website.getAllWebpages().get(2));

        //Setting number of users represented in the autogenerated data
        ClickStreamGenerator generator5 = new ClickStreamGeneratorBuilder().setNumberOfAutoGeneratedUsers(2).build();


    }
}
